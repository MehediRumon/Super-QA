@page "/projects"
@using SuperQA.Shared.DTOs
@using SuperQA.Client.Services
@inject IProjectService ProjectService
@inject NavigationManager Navigation

<PageTitle>Projects</PageTitle>

<h1>Projects</h1>

<div class="mb-3">
    <button class="btn btn-success" @onclick="ShowCreateForm">+ Create New Project</button>
</div>

@if (showCreateForm)
{
    <div class="card mb-4">
        <div class="card-body">
            <h5 class="card-title">Create New Project</h5>
            <EditForm Model="@newProject" OnValidSubmit="@CreateProject">
                <div class="mb-3">
                    <label class="form-label">Name</label>
                    <InputText class="form-control" @bind-Value="newProject.Name" />
                </div>
                <div class="mb-3">
                    <label class="form-label">Description</label>
                    <InputTextArea class="form-control" @bind-Value="newProject.Description" rows="3" />
                </div>
                <button type="submit" class="btn btn-primary">Create</button>
                <button type="button" class="btn btn-secondary" @onclick="() => showCreateForm = false">Cancel</button>
            </EditForm>
        </div>
    </div>
}

@if (loading)
{
    <p><em>Loading projects...</em></p>
}
else if (projects != null)
{
    <div class="row">
        @foreach (var project in projects)
        {
            <div class="col-md-4 mb-3">
                <div class="card">
                    <div class="card-body">
                        <h5 class="card-title">@project.Name</h5>
                        <p class="card-text">@project.Description</p>
                        <p class="text-muted">
                            <small>
                                Test Cases: @project.TestCaseCount | Requirements: @project.RequirementCount
                            </small>
                        </p>
                        <button class="btn btn-primary btn-sm" @onclick="() => ViewProject(project.Id)">View</button>
                        <button class="btn btn-danger btn-sm" @onclick="() => DeleteProject(project.Id)">Delete</button>
                    </div>
                </div>
            </div>
        }
    </div>
}

@code {
    private IEnumerable<ProjectDto>? projects;
    private bool loading = true;
    private bool showCreateForm = false;
    private CreateProjectDto newProject = new();

    protected override async Task OnInitializedAsync()
    {
        await LoadProjects();
    }

    private async Task LoadProjects()
    {
        loading = true;
        projects = await ProjectService.GetProjectsAsync();
        loading = false;
    }

    private void ShowCreateForm()
    {
        newProject = new CreateProjectDto();
        showCreateForm = true;
    }

    private async Task CreateProject()
    {
        await ProjectService.CreateProjectAsync(newProject);
        showCreateForm = false;
        await LoadProjects();
    }

    private void ViewProject(int id)
    {
        Navigation.NavigateTo($"/projects/{id}");
    }

    private async Task DeleteProject(int id)
    {
        if (confirm("Are you sure you want to delete this project?"))
        {
            await ProjectService.DeleteProjectAsync(id);
            await LoadProjects();
        }
    }

    private bool confirm(string message)
    {
        // In production, use JS interop for confirmation
        return true;
    }
}
