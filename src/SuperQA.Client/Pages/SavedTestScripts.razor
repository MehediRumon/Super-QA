@page "/saved-test-scripts"
@using SuperQA.Shared.DTOs
@using SuperQA.Client.Services
@using Microsoft.JSInterop
@inject ITestCaseService TestCaseService
@inject IPlaywrightTestService PlaywrightService
@inject IJSRuntime JSRuntime

<PageTitle>Saved Test Scripts</PageTitle>

<div class="container-fluid py-4">
    <div class="page-header mb-4">
        <h1 class="display-5 fw-bold gradient-text">
            <i class="bi bi-file-code-fill me-2"></i>Saved Test Scripts
        </h1>
        <p class="lead text-muted">Manage and execute your AI-generated test scripts</p>
    </div>

    @if (isLoading)
    {
        <div class="text-center py-5">
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
            <p class="mt-3 text-muted">Loading test scripts...</p>
        </div>
    }
    else if (!string.IsNullOrEmpty(errorMessage))
    {
        <div class="alert alert-danger alert-dismissible fade show" role="alert">
            <i class="bi bi-exclamation-triangle-fill me-2"></i>
            <strong>Error:</strong> @errorMessage
            <button type="button" class="btn-close" @onclick="() => errorMessage = string.Empty"></button>
        </div>
    }
    else if (testScripts == null || !testScripts.Any())
    {
        <div class="text-center py-5">
            <i class="bi bi-inbox" style="font-size: 4rem; opacity: 0.3;"></i>
            <h3 class="mt-3 text-muted">No Test Scripts Found</h3>
            <p class="text-muted">Generate test scripts using the Playwright Generator</p>
            <a href="/playwright-generator" class="btn btn-primary mt-3">
                <i class="bi bi-plus-circle me-2"></i>Generate Test Script
            </a>
        </div>
    }
    else
    {
        <div class="row">
            <div class="col-md-4">
                <div class="card modern-card shadow border-0">
                    <div class="card-header bg-gradient-primary text-white py-3">
                        <h5 class="mb-0"><i class="bi bi-list-ul me-2"></i>Test Scripts (@testScripts.Count())</h5>
                    </div>
                    <div class="card-body p-0">
                        <div class="list-group list-group-flush">
                            @foreach (var script in testScripts)
                            {
                                <a href="#" 
                                   class="list-group-item list-group-item-action @(selectedScript?.Id == script.Id ? "active" : "")"
                                   @onclick="() => SelectScript(script)"
                                   @onclick:preventDefault>
                                    <div class="d-flex w-100 justify-content-between align-items-start">
                                        <div class="flex-grow-1">
                                            <h6 class="mb-1">@script.Title</h6>
                                            <small class="@(selectedScript?.Id == script.Id ? "text-white-50" : "text-muted")">
                                                @script.CreatedAt.ToString("MMM dd, yyyy")
                                            </small>
                                        </div>
                                        @if (script.IsAIGenerated)
                                        {
                                            <span class="badge bg-info ms-2">
                                                <i class="bi bi-robot"></i> AI
                                            </span>
                                        }
                                    </div>
                                </a>
                            }
                        </div>
                    </div>
                </div>
            </div>

            <div class="col-md-8">
                @if (selectedScript != null)
                {
                    <div class="card modern-card shadow border-0">
                        <div class="card-header bg-gradient-success text-white py-3 d-flex justify-content-between align-items-center">
                            <h5 class="mb-0">
                                <i class="bi bi-code-slash me-2"></i>
                                @(isEditing ? "Edit Test Script" : "Test Script Details")
                            </h5>
                            <div>
                                @if (!isEditing)
                                {
                                    <button class="btn btn-sm btn-light me-2" @onclick="StartEdit">
                                        <i class="bi bi-pencil me-1"></i> Edit
                                    </button>
                                    <button class="btn btn-sm btn-light" @onclick="CopyToClipboard">
                                        <i class="bi bi-clipboard me-1"></i> Copy
                                    </button>
                                }
                            </div>
                        </div>
                        <div class="card-body p-4">
                            @if (isEditing)
                            {
                                <div class="mb-3">
                                    <label class="form-label fw-bold">Title</label>
                                    <input type="text" class="form-control" @bind="editedScript.Title" />
                                </div>
                                <div class="mb-3">
                                    <label class="form-label fw-bold">Description</label>
                                    <textarea class="form-control" @bind="editedScript.Description" rows="2"></textarea>
                                </div>
                                <div class="mb-3">
                                    <label class="form-label fw-bold">Automation Script</label>
                                    <textarea class="form-control code-editor" 
                                              @bind="editedScript.AutomationScript" 
                                              rows="15"></textarea>
                                </div>
                                <div class="d-flex gap-2">
                                    <button class="btn btn-success" @onclick="SaveEdit" disabled="@isSaving">
                                        @if (isSaving)
                                        {
                                            <span class="spinner-border spinner-border-sm me-2"></span>
                                        }
                                        <i class="bi bi-check-circle me-1"></i> Save
                                    </button>
                                    <button class="btn btn-secondary" @onclick="CancelEdit">
                                        <i class="bi bi-x-circle me-1"></i> Cancel
                                    </button>
                                </div>
                            }
                            else
                            {
                                <div class="mb-3">
                                    <h6 class="text-muted">Title</h6>
                                    <p>@selectedScript.Title</p>
                                </div>
                                <div class="mb-3">
                                    <h6 class="text-muted">Description</h6>
                                    <p>@selectedScript.Description</p>
                                </div>
                                <div class="mb-3">
                                    <h6 class="text-muted">Preconditions</h6>
                                    <p>@selectedScript.Preconditions</p>
                                </div>
                                @if (!string.IsNullOrEmpty(selectedScript.AutomationScript))
                                {
                                    <div class="mb-3">
                                        <h6 class="text-muted">Automation Script</h6>
                                        <pre class="code-block">@selectedScript.AutomationScript</pre>
                                    </div>
                                }
                                else
                                {
                                    <div class="alert alert-warning">
                                        <i class="bi bi-exclamation-triangle me-2"></i>
                                        No automation script available for this test case.
                                    </div>
                                }

                                <div class="d-flex gap-2 mt-4">
                                    <button class="btn btn-success modern-btn" 
                                            @onclick="ExecuteScript" 
                                            disabled="@(isExecuting || string.IsNullOrEmpty(selectedScript.AutomationScript))">
                                        @if (isExecuting)
                                        {
                                            <span class="spinner-border spinner-border-sm me-2"></span>
                                            <span>Executing...</span>
                                        }
                                        else
                                        {
                                            <i class="bi bi-play-fill me-2"></i>
                                            <span>Execute Test</span>
                                        }
                                    </button>
                                    <button class="btn btn-danger modern-btn" @onclick="DeleteScript" disabled="@isDeleting">
                                        @if (isDeleting)
                                        {
                                            <span class="spinner-border spinner-border-sm me-2"></span>
                                        }
                                        <i class="bi bi-trash me-1"></i> Delete
                                    </button>
                                </div>
                            }
                        </div>
                    </div>

                    @if (executionResult != null)
                    {
                        <div class="card modern-card shadow border-0 mt-4">
                            <div class="card-header @(executionResult.Status == "Pass" ? "bg-success" : "bg-danger") text-white py-3">
                                <h5 class="mb-0"><i class="bi bi-check-circle me-2"></i>Test Execution Results</h5>
                            </div>
                            <div class="card-body p-4">
                                <div class="mb-3">
                                    <strong>Status:</strong>
                                    @if (executionResult.Status == "Pass")
                                    {
                                        <span class="badge bg-success fs-6"><i class="bi bi-check-circle-fill me-1"></i>PASSED</span>
                                    }
                                    else if (executionResult.Status == "Fail")
                                    {
                                        <span class="badge bg-danger fs-6"><i class="bi bi-x-circle-fill me-1"></i>FAILED</span>
                                    }
                                    else
                                    {
                                        <span class="badge bg-warning fs-6"><i class="bi bi-exclamation-triangle-fill me-1"></i>@executionResult.Status</span>
                                    }
                                </div>

                                @if (!string.IsNullOrEmpty(executionResult.ErrorMessage))
                                {
                                    <div class="alert alert-danger">
                                        <strong><i class="bi bi-exclamation-triangle me-2"></i>Error:</strong> @executionResult.ErrorMessage
                                    </div>
                                }

                                @if (executionResult.Logs != null && executionResult.Logs.Any())
                                {
                                    <div>
                                        <strong><i class="bi bi-terminal me-2"></i>Execution Logs:</strong>
                                        <pre class="code-block mt-2 small">@string.Join("\n", executionResult.Logs)</pre>
                                    </div>
                                }

                                @if (!string.IsNullOrEmpty(executionResult.Output))
                                {
                                    <div class="mt-3">
                                        <strong><i class="bi bi-file-text me-2"></i>Test Output:</strong>
                                        <pre class="code-block mt-2 small">@executionResult.Output</pre>
                                    </div>
                                }
                            </div>
                        </div>
                    }
                }
                else
                {
                    <div class="card modern-card shadow border-0">
                        <div class="card-body text-center py-5">
                            <i class="bi bi-arrow-left-circle" style="font-size: 3rem; opacity: 0.3;"></i>
                            <p class="mt-3 text-muted">Select a test script from the list to view details</p>
                        </div>
                    </div>
                }
            </div>
        </div>
    }
</div>

<style>
    .gradient-text {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        -webkit-background-clip: text;
        -webkit-text-fill-color: transparent;
        background-clip: text;
    }

    .modern-card {
        border-radius: 15px;
        overflow: hidden;
        transition: transform 0.3s ease;
    }

    .bg-gradient-primary {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    }

    .bg-gradient-success {
        background: linear-gradient(135deg, #11998e 0%, #38ef7d 100%);
    }

    .modern-btn {
        border-radius: 10px;
        padding: 12px;
        font-weight: 600;
        transition: all 0.3s ease;
        border: none;
    }

    .modern-btn:hover:not(:disabled) {
        transform: translateY(-2px);
        box-shadow: 0 5px 15px rgba(102, 126, 234, 0.4);
    }

    .btn-success.modern-btn {
        background: linear-gradient(135deg, #11998e 0%, #38ef7d 100%);
    }

    .btn-danger.modern-btn {
        background: linear-gradient(135deg, #eb3349 0%, #f45c43 100%);
    }

    .code-block {
        max-height: 400px;
        overflow-y: auto;
        background-color: #2d2d2d;
        color: #f8f8f2;
        padding: 15px;
        border-radius: 8px;
        font-family: 'Consolas', 'Monaco', 'Courier New', monospace;
        font-size: 13px;
        line-height: 1.5;
    }

    .code-editor {
        font-family: 'Consolas', 'Monaco', 'Courier New', monospace;
        font-size: 13px;
        background-color: #2d2d2d;
        color: #f8f8f2;
        padding: 15px;
        border-radius: 8px;
        border: 1px solid #444;
        resize: vertical;
        min-height: 300px;
        line-height: 1.5;
    }

    .code-editor:focus {
        background-color: #2d2d2d;
        color: #f8f8f2;
        border-color: #667eea;
        box-shadow: 0 0 0 0.2rem rgba(102, 126, 234, 0.25);
    }

    .page-header {
        padding: 20px 0;
        border-bottom: 2px solid #f0f0f0;
    }

    .list-group-item.active {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        border-color: #667eea;
    }

    .list-group-item {
        transition: all 0.2s ease;
    }

    .list-group-item:hover {
        background-color: #f8f9fa;
        transform: translateX(5px);
    }

    .list-group-item.active:hover {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        transform: translateX(5px);
    }
</style>

@code {
    private IEnumerable<TestCaseDto> testScripts = Array.Empty<TestCaseDto>();
    private TestCaseDto? selectedScript = null;
    private TestCaseDto editedScript = new();
    private PlaywrightTestExecutionResponse? executionResult = null;
    private string errorMessage = string.Empty;
    private bool isLoading = true;
    private bool isExecuting = false;
    private bool isDeleting = false;
    private bool isEditing = false;
    private bool isSaving = false;

    protected override async Task OnInitializedAsync()
    {
        await LoadTestScripts();
    }

    private async Task LoadTestScripts()
    {
        isLoading = true;
        errorMessage = string.Empty;
        
        try
        {
            // Get test cases from all projects that have automation scripts
            var allProjects = new[] { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 }; // Try multiple project IDs
            var allTestCases = new List<TestCaseDto>();
            
            foreach (var projectId in allProjects)
            {
                try
                {
                    var projectTestCases = await TestCaseService.GetTestCasesAsync(projectId);
                    allTestCases.AddRange(projectTestCases);
                }
                catch
                {
                    // Project doesn't exist, continue
                }
            }
            
            // Filter to only test cases with automation scripts
            testScripts = allTestCases
                .Where(tc => !string.IsNullOrWhiteSpace(tc.AutomationScript))
                .OrderByDescending(tc => tc.CreatedAt)
                .ToList();
        }
        catch (Exception ex)
        {
            errorMessage = $"Failed to load test scripts: {ex.Message}";
        }
        finally
        {
            isLoading = false;
        }
    }

    private void SelectScript(TestCaseDto script)
    {
        selectedScript = script;
        executionResult = null;
        isEditing = false;
    }

    private void StartEdit()
    {
        if (selectedScript == null) return;
        
        editedScript = new TestCaseDto
        {
            Id = selectedScript.Id,
            ProjectId = selectedScript.ProjectId,
            RequirementId = selectedScript.RequirementId,
            Title = selectedScript.Title,
            Description = selectedScript.Description,
            Preconditions = selectedScript.Preconditions,
            Steps = selectedScript.Steps,
            ExpectedResults = selectedScript.ExpectedResults,
            AutomationScript = selectedScript.AutomationScript,
            IsAIGenerated = selectedScript.IsAIGenerated,
            CreatedAt = selectedScript.CreatedAt,
            UpdatedAt = selectedScript.UpdatedAt
        };
        isEditing = true;
    }

    private async Task SaveEdit()
    {
        if (selectedScript == null) return;
        
        isSaving = true;
        
        try
        {
            var success = await TestCaseService.UpdateTestCaseAsync(selectedScript.Id, editedScript);
            
            if (success)
            {
                selectedScript.Title = editedScript.Title;
                selectedScript.Description = editedScript.Description;
                selectedScript.AutomationScript = editedScript.AutomationScript;
                selectedScript.Preconditions = editedScript.Preconditions;
                selectedScript.Steps = editedScript.Steps;
                selectedScript.ExpectedResults = editedScript.ExpectedResults;
                
                isEditing = false;
                await LoadTestScripts(); // Reload to get updated data
            }
            else
            {
                errorMessage = "Failed to update test script";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error updating test script: {ex.Message}";
        }
        finally
        {
            isSaving = false;
        }
    }

    private void CancelEdit()
    {
        isEditing = false;
        editedScript = new();
    }

    private async Task ExecuteScript()
    {
        if (selectedScript == null || string.IsNullOrEmpty(selectedScript.AutomationScript)) 
            return;
        
        isExecuting = true;
        executionResult = null;
        errorMessage = string.Empty;

        try
        {
            // Extract URL from preconditions
            var url = ExtractUrlFromPreconditions(selectedScript.Preconditions);
            
            var request = new PlaywrightTestExecutionRequest
            {
                TestScript = selectedScript.AutomationScript,
                ApplicationUrl = url
            };

            executionResult = await PlaywrightService.ExecuteTestScriptAsync(request);
        }
        catch (Exception ex)
        {
            errorMessage = $"Execution error: {ex.Message}";
        }
        finally
        {
            isExecuting = false;
        }
    }

    private async Task DeleteScript()
    {
        if (selectedScript == null) return;
        
        var confirmed = await JSRuntime.InvokeAsync<bool>("confirm", 
            $"Are you sure you want to delete '{selectedScript.Title}'?");
        
        if (!confirmed) return;
        
        isDeleting = true;
        
        try
        {
            var success = await TestCaseService.DeleteTestCaseAsync(selectedScript.Id);
            
            if (success)
            {
                selectedScript = null;
                await LoadTestScripts();
            }
            else
            {
                errorMessage = "Failed to delete test script";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error deleting test script: {ex.Message}";
        }
        finally
        {
            isDeleting = false;
        }
    }

    private async Task CopyToClipboard()
    {
        if (selectedScript == null || string.IsNullOrEmpty(selectedScript.AutomationScript)) 
            return;
        
        try
        {
            await JSRuntime.InvokeVoidAsync("navigator.clipboard.writeText", selectedScript.AutomationScript);
        }
        catch
        {
            // Fallback or error handling
        }
    }

    private string ExtractUrlFromPreconditions(string preconditions)
    {
        if (string.IsNullOrEmpty(preconditions))
            return string.Empty;
        
        // Try to extract URL from text like "Navigate to: https://example.com"
        var urlPattern = @"https?://[^\s]+";
        var match = System.Text.RegularExpressions.Regex.Match(preconditions, urlPattern);
        
        return match.Success ? match.Value : string.Empty;
    }
}
