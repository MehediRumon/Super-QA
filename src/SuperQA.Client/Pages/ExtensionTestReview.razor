@page "/extension-test-review"
@using SuperQA.Shared.DTOs
@using SuperQA.Client.Services
@using Microsoft.JSInterop
@inject IPlaywrightTestService PlaywrightService
@inject ISettingsService SettingsService
@inject IJSRuntime JSRuntime
@inject NavigationManager Navigation
@inject HttpClient Http

<PageTitle>Review Extension Test</PageTitle>

<div class="container-fluid py-4">
    <div class="page-header mb-4">
        <h1 class="display-5 fw-bold gradient-text">
            <i class="bi bi-clipboard-check me-2"></i>Review and Generate Test from Extension
        </h1>
        <p class="lead text-muted">Review your recorded Gherkin steps and generate Playwright test script</p>
    </div>

    <div class="row mt-4">
        <div class="col-md-6">
            <div class="card modern-card shadow-lg border-0">
                <div class="card-header bg-gradient-primary text-white py-3">
                    <h5 class="mb-0"><i class="bi bi-gear-fill me-2"></i>Test Configuration</h5>
                </div>
                <div class="card-body p-4">
                    <div class="mb-3">
                        <label class="form-label fw-bold">Test Name <span class="text-danger">*</span></label>
                        <input type="text" 
                               class="form-control" 
                               @bind="testName" 
                               placeholder="e.g., User Login Test" />
                        <small class="form-text text-muted">Name for your test case</small>
                    </div>

                    <div class="mb-3">
                        <label class="form-label fw-bold">Application URL <span class="text-danger">*</span></label>
                        <input type="url" 
                               class="form-control" 
                               @bind="applicationUrl" 
                               placeholder="https://example.com" />
                        <small class="form-text text-muted">URL of the application under test</small>
                    </div>

                    <div class="mb-3">
                        <label class="form-label fw-bold">Recorded Gherkin Steps with Locators</label>
                        <textarea class="form-control gherkin-display" 
                                  @bind="gherkinStepsText" 
                                  rows="12"></textarea>
                        <small class="form-text text-muted">@stepsCount step(s) recorded from browser extension - You can edit the steps before generating the test script</small>
                    </div>

                    <div class="d-grid gap-2">
                        <button class="btn btn-primary btn-lg modern-btn" @onclick="GenerateTestScript" disabled="@isGenerating">
                            @if (isGenerating)
                            {
                                <span class="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>
                                <span>Generating Test Script...</span>
                            }
                            else
                            {
                                <i class="bi bi-magic me-2"></i>
                                <span>Generate Test Script</span>
                            }
                        </button>

                        @if (dataId.HasValue)
                        {
                            <div class="btn-group" role="group">
                                <button class="btn btn-outline-success" @onclick="SaveChanges" disabled="@isSaving">
                                    @if (isSaving)
                                    {
                                        <span class="spinner-border spinner-border-sm me-1"></span>
                                    }
                                    else
                                    {
                                        <i class="bi bi-save me-1"></i>
                                    }
                                    <span>Save Changes</span>
                                </button>
                                <button class="btn btn-outline-danger" @onclick="DeleteData" disabled="@isDeleting">
                                    @if (isDeleting)
                                    {
                                        <span class="spinner-border spinner-border-sm me-1"></span>
                                    }
                                    else
                                    {
                                        <i class="bi bi-trash me-1"></i>
                                    }
                                    <span>Delete</span>
                                </button>
                            </div>
                        }
                    </div>

                    @if (!string.IsNullOrEmpty(errorMessage))
                    {
                        <div class="alert alert-danger mt-3 alert-dismissible fade show" role="alert">
                            <i class="bi bi-exclamation-triangle-fill me-2"></i>
                            <strong>Error:</strong> @errorMessage
                            <button type="button" class="btn-close" @onclick="() => errorMessage = string.Empty"></button>
                            
                            @{
                                var showDataNotFoundTips = errorMessage.Contains("not found") || errorMessage.Contains("deleted") || errorMessage.Contains("expired");
                                var showServerErrorTips = errorMessage.Contains("API") || errorMessage.Contains("server") || errorMessage.Contains("connect");
                            }
                            
                            @if (showDataNotFoundTips)
                            {
                                <hr />
                                <div class="mt-2">
                                    <strong><i class="bi bi-lightbulb me-2"></i>Troubleshooting Tips:</strong>
                                    <ul class="mb-0 mt-2">
                                        <li>Extension data is stored temporarily. Record your test steps again if they're no longer available.</li>
                                        <li>Make sure you're using the latest link from the browser extension's "Send to SuperQA" button.</li>
                                        <li>If you've already generated a test from this data, check the "Generated Tests" project in the main dashboard.</li>
                                    </ul>
                                </div>
                            }
                            else if (showServerErrorTips)
                            {
                                <hr />
                                <div class="mt-2">
                                    <strong><i class="bi bi-lightbulb me-2"></i>Troubleshooting Tips:</strong>
                                    <ul class="mb-0 mt-2">
                                        <li>Ensure the SuperQA API server is running. Start it with: <code>cd src/SuperQA.Api && dotnet run</code></li>
                                        <li>Verify the API is accessible at the expected URL (usually https://localhost:7001 or http://localhost:7000)</li>
                                        <li>Check your network connection and firewall settings.</li>
                                        <li>Review the browser console (F12) for additional error details.</li>
                                    </ul>
                                </div>
                            }
                        </div>
                    }

                    @if (warnings != null && warnings.Any())
                    {
                        <div class="alert alert-warning mt-3" role="alert">
                            @foreach (var warning in warnings)
                            {
                                <div><i class="bi bi-exclamation-triangle me-2"></i>@warning</div>
                            }
                        </div>
                    }
                </div>
            </div>
        </div>

        <div class="col-md-6">
            <div class="card modern-card shadow-lg border-0">
                <div class="card-header bg-gradient-success text-white py-3 d-flex justify-content-between align-items-center">
                    <h5 class="mb-0"><i class="bi bi-code-slash me-2"></i>Generated Test Script</h5>
                    @if (!string.IsNullOrEmpty(generatedScript))
                    {
                        <button class="btn btn-sm btn-light" @onclick="CopyToClipboard">
                            <i class="bi bi-clipboard me-1"></i> Copy
                        </button>
                    }
                </div>
                <div class="card-body p-4">
                    @if (string.IsNullOrEmpty(generatedScript))
                    {
                        <div class="text-center py-5 text-muted">
                            <i class="bi bi-code-square" style="font-size: 3rem; opacity: 0.3;"></i>
                            <p class="mt-3">Click "Generate Test Script" to create your Playwright test...</p>
                        </div>
                    }
                    else
                    {
                        <textarea class="form-control code-editor" 
                                  @bind="generatedScript" 
                                  rows="20"></textarea>
                        
                        <div class="mt-3">
                            <div class="form-check form-switch mb-2">
                                <input class="form-check-input" type="checkbox" id="debugModeSwitch" @bind="debugMode">
                                <label class="form-check-label" for="debugModeSwitch">
                                    <i class="bi bi-bug me-1"></i>Debug Mode (Headed browser with slow motion)
                                </label>
                            </div>
                            @if (debugMode)
                            {
                                <div class="mb-2">
                                    <label class="form-label">Slow Motion (ms)</label>
                                    <input type="number" class="form-control" @bind="slowMotion" min="100" max="5000" step="100" />
                                    <small class="text-muted">Delay between actions in milliseconds (100-5000ms)</small>
                                </div>
                            }
                        </div>
                        
                        <div class="d-grid gap-2 mt-3">
                            <button class="btn btn-success btn-lg modern-btn" @onclick="ExecuteTestScript" disabled="@isExecuting">
                                @if (isExecuting)
                                {
                                    <span class="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>
                                    <span>Executing...</span>
                                }
                                else
                                {
                                    <i class="bi bi-play-fill me-2"></i>
                                    <span>Execute Test</span>
                                }
                            </button>
                        </div>
                    }
                </div>
            </div>

            @if (executionResult != null)
            {
                <div class="card modern-card shadow-lg border-0 mt-4">
                    <div class="card-header @(executionResult.Status == "Pass" ? "bg-success" : "bg-danger") text-white py-3">
                        <h5 class="mb-0"><i class="bi bi-check-circle me-2"></i>Test Execution Results</h5>
                    </div>
                    <div class="card-body p-4">
                        <div class="mb-3">
                            <strong>Status:</strong>
                            @if (executionResult.Status == "Pass")
                            {
                                <span class="badge bg-success fs-6"><i class="bi bi-check-circle-fill me-1"></i>PASSED</span>
                            }
                            else if (executionResult.Status == "Fail")
                            {
                                <span class="badge bg-danger fs-6"><i class="bi bi-x-circle-fill me-1"></i>FAILED</span>
                            }
                            else
                            {
                                <span class="badge bg-warning fs-6"><i class="bi bi-exclamation-triangle-fill me-1"></i>@executionResult.Status</span>
                            }
                        </div>

                        @if (!string.IsNullOrEmpty(executionResult.ErrorMessage))
                        {
                            <div class="alert alert-danger">
                                <strong><i class="bi bi-exclamation-triangle me-2"></i>Error:</strong> @executionResult.ErrorMessage
                            </div>
                        }

                        @if (executionResult.Logs != null && executionResult.Logs.Any())
                        {
                            <div>
                                <strong><i class="bi bi-terminal me-2"></i>Execution Logs:</strong>
                                <pre class="code-block mt-2 small">@string.Join("\n", executionResult.Logs)</pre>
                            </div>
                        }

                        @if (!string.IsNullOrEmpty(executionResult.Output))
                        {
                            <div class="mt-3">
                                <strong><i class="bi bi-file-text me-2"></i>Test Output:</strong>
                                <pre class="code-block mt-2 small">@executionResult.Output</pre>
                            </div>
                        }
                    </div>
                </div>
            }
        </div>
    </div>
</div>

<style>
    .gradient-text {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        -webkit-background-clip: text;
        -webkit-text-fill-color: transparent;
        background-clip: text;
    }

    .modern-card {
        border-radius: 15px;
        overflow: hidden;
        transition: transform 0.3s ease;
    }

    .modern-card:hover {
        transform: translateY(-5px);
    }

    .bg-gradient-primary {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    }

    .bg-gradient-success {
        background: linear-gradient(135deg, #11998e 0%, #38ef7d 100%);
    }

    .modern-btn {
        border-radius: 10px;
        padding: 12px;
        font-weight: 600;
        transition: all 0.3s ease;
        border: none;
    }

    .modern-btn:hover:not(:disabled) {
        transform: translateY(-2px);
        box-shadow: 0 5px 15px rgba(102, 126, 234, 0.4);
    }

    .btn-primary.modern-btn {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    }

    .btn-success.modern-btn {
        background: linear-gradient(135deg, #11998e 0%, #38ef7d 100%);
    }

    .code-block {
        max-height: 400px;
        overflow-y: auto;
        background-color: #2d2d2d;
        color: #f8f8f2;
        padding: 15px;
        border-radius: 8px;
        font-family: 'Consolas', 'Monaco', 'Courier New', monospace;
        font-size: 13px;
        line-height: 1.5;
    }

    .code-editor {
        font-family: 'Consolas', 'Monaco', 'Courier New', monospace;
        font-size: 13px;
        background-color: #2d2d2d;
        color: #f8f8f2;
        padding: 15px;
        border-radius: 8px;
        border: 1px solid #444;
        resize: vertical;
        min-height: 400px;
        line-height: 1.5;
    }

    .code-editor:focus {
        background-color: #2d2d2d;
        color: #f8f8f2;
        border-color: #667eea;
        box-shadow: 0 0 0 0.2rem rgba(102, 126, 234, 0.25);
    }

    .gherkin-display {
        font-family: 'Consolas', 'Monaco', 'Courier New', monospace;
        font-size: 13px;
        background-color: #f8f9fa;
        resize: vertical;
    }

    .form-control:focus, .form-select:focus {
        border-color: #667eea;
        box-shadow: 0 0 0 0.2rem rgba(102, 126, 234, 0.25);
    }

    .page-header {
        padding: 20px 0;
        border-bottom: 2px solid #f0f0f0;
    }

    .alert {
        border-radius: 10px;
    }
</style>

@code {
    private string testName = string.Empty;
    private string applicationUrl = string.Empty;
    private string gherkinStepsText = string.Empty;
    private int stepsCount = 0;
    private int? dataId = null;
    private List<BrowserExtensionStep> steps = new();
    private string generatedScript = string.Empty;
    private string errorMessage = string.Empty;
    private string[]? warnings = null;
    private bool isGenerating = false;
    private bool isExecuting = false;
    private bool isSaving = false;
    private bool isDeleting = false;
    private bool debugMode = false;
    private int slowMotion = 500;
    private PlaywrightTestExecutionResponse? executionResult = null;

    protected override async Task OnInitializedAsync()
    {
        // Try to get data from query parameters or local storage via JS Interop
        await LoadExtensionData();
    }

    private async Task LoadExtensionData()
    {
        try
        {
            // Get dataId from query string
            var uri = Navigation.ToAbsoluteUri(Navigation.Uri);
            var query = uri.Query;
            
            // Simple query string parsing
            string? dataIdStr = null;
            if (query.Contains("dataId="))
            {
                var start = query.IndexOf("dataId=") + 7;
                var end = query.IndexOf('&', start);
                dataIdStr = end == -1 ? query.Substring(start) : query.Substring(start, end - start);
            }
            
            if (!string.IsNullOrEmpty(dataIdStr) && int.TryParse(dataIdStr, out int parsedId))
            {
                dataId = parsedId;
                
                // Fetch data from API
                try
                {
                    var response = await Http.GetFromJsonAsync<GenerateFromExtensionRequest>($"/api/playwright/get-extension-data/{dataId}");
                    if (response != null)
                    {
                        testName = response.TestName ?? string.Empty;
                        applicationUrl = response.ApplicationUrl ?? string.Empty;
                        steps = response.Steps ?? new();
                        stepsCount = steps.Count;
                        gherkinStepsText = FormatStepsForDisplay(steps);
                    }
                    else
                    {
                        errorMessage = "Failed to load extension data. The response was empty.";
                    }
                }
                catch (HttpRequestException httpEx)
                {
                    Console.WriteLine($"HTTP error loading extension data: {httpEx.Message}");
                    
                    // Check for specific HTTP status codes
                    if (httpEx.Message.Contains("404"))
                    {
                        errorMessage = "Extension data not found. The data may have been deleted or has expired. Please record your test steps again using the browser extension.";
                    }
                    else if (httpEx.Message.Contains("500"))
                    {
                        errorMessage = "Server error loading extension data. Please ensure the API is running and the database is accessible. Try again in a moment.";
                    }
                    else if (httpEx.Message.Contains("400"))
                    {
                        errorMessage = "Invalid data ID format. Please ensure you're using a valid link from the browser extension.";
                    }
                    else
                    {
                        errorMessage = $"Failed to connect to the API server. Please ensure the SuperQA API is running on the expected port. Error: {httpEx.Message}";
                    }
                }
            }
            else if (!string.IsNullOrEmpty(dataIdStr))
            {
                errorMessage = $"Invalid data ID format: '{dataIdStr}'. The ID must be a valid number. Please use the 'Send to SuperQA' button from the browser extension.";
            }
            else
            {
                errorMessage = "No extension data ID provided. Please use the 'Send to SuperQA' button from the browser extension to open this page with the correct parameters.";
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Unexpected error loading extension data: {ex.Message}");
            errorMessage = $"An unexpected error occurred while loading extension data: {ex.Message}. Please try recording your test steps again or contact support if the issue persists.";
        }
    }

    private string FormatStepsForDisplay(List<BrowserExtensionStep> steps)
    {
        var formatted = "Browser Extension Recorded Steps:\n\n";
        for (int i = 0; i < steps.Count; i++)
        {
            var step = steps[i];
            formatted += $"{i + 1}. {step.Description}\n";
            if (!string.IsNullOrWhiteSpace(step.Action))
            {
                formatted += $"   Action: {step.Action}\n";
            }
            if (!string.IsNullOrWhiteSpace(step.Locator))
            {
                formatted += $"   Locator: {step.Locator}\n";
            }
            if (!string.IsNullOrWhiteSpace(step.Value))
            {
                formatted += $"   Value: {step.Value}\n";
            }
            formatted += "\n";
        }
        return formatted;
    }

    private async Task GenerateTestScript()
    {
        errorMessage = string.Empty;
        warnings = null;
        generatedScript = string.Empty;
        executionResult = null;

        if (string.IsNullOrWhiteSpace(testName))
        {
            errorMessage = "Please enter a test name";
            return;
        }

        if (string.IsNullOrWhiteSpace(applicationUrl))
        {
            errorMessage = "Please enter the application URL";
            return;
        }

        if (string.IsNullOrWhiteSpace(gherkinStepsText))
        {
            errorMessage = "No Gherkin steps found. Please record steps from the browser extension first.";
            return;
        }

        isGenerating = true;

        try
        {
            // Get settings for API key
            var settings = await SettingsService.GetSettingsAsync();
            if (settings == null || string.IsNullOrWhiteSpace(settings.OpenAIApiKey))
            {
                errorMessage = "OpenAI API key is required. Please configure it in Settings.";
                return;
            }

            // Parse the steps from the text (in case they were edited)
            var parsedSteps = ParseGherkinStepsFromText(gherkinStepsText);

            var request = new GenerateFromExtensionRequest
            {
                TestName = testName,
                ApplicationUrl = applicationUrl,
                Steps = parsedSteps,
                OpenAIApiKey = settings.OpenAIApiKey,
                Model = settings.SelectedModel
            };

            // Call the API with extensionDataId as query parameter
            var url = dataId.HasValue 
                ? $"/api/playwright/generate-from-extension?extensionDataId={dataId}" 
                : "/api/playwright/generate-from-extension";
            
            var response = await Http.PostAsJsonAsync(url, request);
            var result = await response.Content.ReadFromJsonAsync<PlaywrightTestGenerationResponse>();

            if (result != null && result.Success)
            {
                generatedScript = result.GeneratedScript;
                warnings = result.Warnings;
            }
            else
            {
                errorMessage = result?.ErrorMessage ?? "Failed to generate test script";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Unexpected error: {ex.Message}";
        }
        finally
        {
            isGenerating = false;
        }
    }

    private async Task ExecuteTestScript()
    {
        errorMessage = string.Empty;
        executionResult = null;
        isExecuting = true;

        try
        {
            var request = new PlaywrightTestExecutionRequest
            {
                TestScript = generatedScript,
                ApplicationUrl = applicationUrl,
                DebugMode = debugMode,
                SlowMotion = debugMode ? slowMotion : null
            };

            var response = await Http.PostAsJsonAsync("/api/playwright/execute", request);
            executionResult = await response.Content.ReadFromJsonAsync<PlaywrightTestExecutionResponse>();
        }
        catch (Exception ex)
        {
            errorMessage = $"Execution error: {ex.Message}";
        }
        finally
        {
            isExecuting = false;
        }
    }

    private async Task CopyToClipboard()
    {
        try
        {
            await JSRuntime.InvokeVoidAsync("navigator.clipboard.writeText", generatedScript);
        }
        catch
        {
            // Fallback or error handling
        }
    }

    private async Task SaveChanges()
    {
        if (!dataId.HasValue)
            return;

        isSaving = true;
        errorMessage = string.Empty;

        try
        {
            // Parse the edited Gherkin steps
            var editedSteps = ParseGherkinStepsFromText(gherkinStepsText);

            var request = new GenerateFromExtensionRequest
            {
                TestName = testName,
                ApplicationUrl = applicationUrl,
                Steps = editedSteps
            };

            var response = await Http.PutAsJsonAsync($"/api/playwright/update-extension-data/{dataId}", request);
            
            if (response.IsSuccessStatusCode)
            {
                steps = editedSteps;
                // Show success message
                await JSRuntime.InvokeVoidAsync("alert", "Changes saved successfully!");
            }
            else
            {
                errorMessage = "Failed to save changes. Please try again.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error saving changes: {ex.Message}";
        }
        finally
        {
            isSaving = false;
        }
    }

    private async Task DeleteData()
    {
        if (!dataId.HasValue)
            return;

        var confirmed = await JSRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to delete this test data?");
        if (!confirmed)
            return;

        isDeleting = true;
        errorMessage = string.Empty;

        try
        {
            var response = await Http.DeleteAsync($"/api/playwright/delete-extension-data/{dataId}");
            
            if (response.IsSuccessStatusCode)
            {
                // Redirect to home or test list page
                Navigation.NavigateTo("/");
            }
            else
            {
                errorMessage = "Failed to delete data. Please try again.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error deleting data: {ex.Message}";
        }
        finally
        {
            isDeleting = false;
        }
    }

    private List<BrowserExtensionStep> ParseGherkinStepsFromText(string text)
    {
        var parsedSteps = new List<BrowserExtensionStep>();
        var lines = text.Split('\n', StringSplitOptions.RemoveEmptyEntries);
        
        BrowserExtensionStep? currentStep = null;
        
        foreach (var line in lines)
        {
            var trimmedLine = line.Trim();
            
            if (string.IsNullOrWhiteSpace(trimmedLine) || trimmedLine.StartsWith("Browser Extension"))
                continue;
            
            // Check if it's a step number (e.g., "1. Click on button")
            if (System.Text.RegularExpressions.Regex.IsMatch(trimmedLine, @"^\d+\."))
            {
                // Save previous step if exists
                if (currentStep != null)
                {
                    parsedSteps.Add(currentStep);
                }
                
                // Start new step
                currentStep = new BrowserExtensionStep
                {
                    Description = System.Text.RegularExpressions.Regex.Replace(trimmedLine, @"^\d+\.\s*", "")
                };
            }
            else if (currentStep != null)
            {
                // Parse action, locator, or value
                if (trimmedLine.StartsWith("Action:", StringComparison.OrdinalIgnoreCase))
                {
                    currentStep.Action = trimmedLine.Substring(7).Trim();
                }
                else if (trimmedLine.StartsWith("Locator:", StringComparison.OrdinalIgnoreCase))
                {
                    currentStep.Locator = trimmedLine.Substring(8).Trim();
                }
                else if (trimmedLine.StartsWith("Value:", StringComparison.OrdinalIgnoreCase))
                {
                    currentStep.Value = trimmedLine.Substring(6).Trim();
                }
            }
        }
        
        // Add last step
        if (currentStep != null)
        {
            parsedSteps.Add(currentStep);
        }
        
        return parsedSteps;
    }
}
