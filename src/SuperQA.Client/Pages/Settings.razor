@page "/settings"
@using SuperQA.Shared.DTOs
@using SuperQA.Client.Services
@inject ISettingsService SettingsService

<PageTitle>Settings</PageTitle>

<div class="container-fluid py-4">
    <div class="row">
        <div class="col-lg-8 mx-auto">
            <div class="card shadow-lg border-0">
                <div class="card-header bg-gradient-primary text-white py-3">
                    <h3 class="mb-0"><i class="bi bi-gear-fill me-2"></i>Settings</h3>
                    <p class="mb-0 small">Configure your SuperQA preferences</p>
                </div>
                <div class="card-body p-4">
                    @if (!string.IsNullOrEmpty(errorMessage))
                    {
                        <div class="alert alert-danger alert-dismissible fade show" role="alert">
                            <i class="bi bi-exclamation-triangle-fill me-2"></i>
                            <strong>Error:</strong> @errorMessage
                            <button type="button" class="btn-close" @onclick="() => errorMessage = string.Empty"></button>
                        </div>
                    }

                    @if (!string.IsNullOrEmpty(successMessage))
                    {
                        <div class="alert alert-success alert-dismissible fade show" role="alert">
                            <i class="bi bi-check-circle-fill me-2"></i>
                            @successMessage
                            <button type="button" class="btn-close" @onclick="() => successMessage = string.Empty"></button>
                        </div>
                    }

                    @if (isLoading)
                    {
                        <div class="text-center py-5">
                            <div class="spinner-border text-primary" role="status">
                                <span class="visually-hidden">Loading...</span>
                            </div>
                            <p class="mt-3 text-muted">Loading settings...</p>
                        </div>
                    }
                    else
                    {
                        <form @onsubmit="SaveSettings">
                            <!-- OpenAI API Key Section -->
                            <div class="mb-4">
                                <label class="form-label fw-bold">
                                    <i class="bi bi-key-fill me-2 text-primary"></i>
                                    OpenAI API Key
                                </label>
                                <div class="input-group">
                                    <span class="input-group-text bg-light">
                                        <i class="bi bi-lock-fill"></i>
                                    </span>
                                    <input type="@(showApiKey ? "text" : "password")" 
                                           class="form-control form-control-lg" 
                                           @bind="apiKey" 
                                           placeholder="sk-..." 
                                           required />
                                    <button class="btn btn-outline-secondary" 
                                            type="button" 
                                            @onclick="() => showApiKey = !showApiKey">
                                        <i class="bi bi-eye@(showApiKey ? "-slash" : "")-fill"></i>
                                    </button>
                                </div>
                                <small class="form-text text-muted">
                                    <i class="bi bi-info-circle me-1"></i>
                                    Your API key is stored securely and only used for generating test scripts. 
                                    Get your key from <a href="https://platform.openai.com/api-keys" target="_blank">OpenAI Platform</a>.
                                </small>
                            </div>

                            <!-- AI Model Selection -->
                            <div class="mb-4">
                                <label class="form-label fw-bold">
                                    <i class="bi bi-cpu-fill me-2 text-primary"></i>
                                    AI Model
                                </label>
                                <select class="form-select form-select-lg" @bind="selectedModel">
                                    <option value="gpt-4o-mini">GPT-4o Mini (Recommended - Fast & Cost-effective)</option>
                                    <option value="gpt-4o">GPT-4o (Most Capable)</option>
                                    <option value="gpt-4-turbo">GPT-4 Turbo (Balanced)</option>
                                    <option value="gpt-3.5-turbo">GPT-3.5 Turbo (Fastest)</option>
                                </select>
                                <small class="form-text text-muted">
                                    <i class="bi bi-info-circle me-1"></i>
                                    Choose the AI model for generating test scripts. GPT-4o Mini offers the best balance of quality and cost.
                                </small>
                            </div>

                            <!-- Playwright Headless Mode -->
                            <div class="mb-4">
                                <label class="form-label fw-bold">
                                    <i class="bi bi-window-desktop me-2 text-primary"></i>
                                    Browser Mode
                                </label>
                                <div class="form-check form-switch">
                                    <input class="form-check-input" 
                                           type="checkbox" 
                                           id="headlessSwitch" 
                                           @bind="playwrightHeadless" />
                                    <label class="form-check-label" for="headlessSwitch">
                                        @if (playwrightHeadless)
                                        {
                                            <span><i class="bi bi-eye-slash-fill me-1"></i>Headless Mode (Browser runs invisibly)</span>
                                        }
                                        else
                                        {
                                            <span><i class="bi bi-eye-fill me-1"></i>Headed Mode (Browser window visible)</span>
                                        }
                                    </label>
                                </div>
                                <small class="form-text text-muted">
                                    <i class="bi bi-info-circle me-1"></i>
                                    Headless mode is faster and recommended for production. Headed mode is useful for debugging.
                                </small>
                            </div>

                            <!-- Save Button -->
                            <div class="d-grid gap-2">
                                <button type="submit" class="btn btn-primary btn-lg" disabled="@isSaving">
                                    @if (isSaving)
                                    {
                                        <span class="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>
                                        <span>Saving...</span>
                                    }
                                    else
                                    {
                                        <i class="bi bi-save-fill me-2"></i>
                                        <span>Save Settings</span>
                                    }
                                </button>
                            </div>
                        </form>

                        @if (settings != null && settings.Id > 0)
                        {
                            <div class="mt-4 pt-3 border-top">
                                <small class="text-muted">
                                    <i class="bi bi-clock-history me-1"></i>
                                    Last updated: @settings.UpdatedAt.ToLocalTime().ToString("f")
                                </small>
                            </div>
                        }
                    }
                </div>
            </div>

            <!-- Information Cards -->
            <div class="row mt-4">
                <div class="col-md-4">
                    <div class="card border-0 shadow-sm h-100">
                        <div class="card-body text-center">
                            <i class="bi bi-shield-check text-success" style="font-size: 2rem;"></i>
                            <h6 class="mt-2">Secure Storage</h6>
                            <small class="text-muted">Your API key is encrypted and stored securely</small>
                        </div>
                    </div>
                </div>
                <div class="col-md-4">
                    <div class="card border-0 shadow-sm h-100">
                        <div class="card-body text-center">
                            <i class="bi bi-lightning-charge text-warning" style="font-size: 2rem;"></i>
                            <h6 class="mt-2">Auto-Load</h6>
                            <small class="text-muted">Settings are automatically applied when generating tests</small>
                        </div>
                    </div>
                </div>
                <div class="col-md-4">
                    <div class="card border-0 shadow-sm h-100">
                        <div class="card-body text-center">
                            <i class="bi bi-gear-wide-connected text-primary" style="font-size: 2rem;"></i>
                            <h6 class="mt-2">Customizable</h6>
                            <small class="text-muted">Change settings anytime to match your workflow</small>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<style>
    .bg-gradient-primary {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    }

    .card {
        border-radius: 15px;
        overflow: hidden;
    }

    .form-control:focus, .form-select:focus {
        border-color: #667eea;
        box-shadow: 0 0 0 0.2rem rgba(102, 126, 234, 0.25);
    }

    .btn-primary {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        border: none;
        border-radius: 10px;
        padding: 12px;
        font-weight: 600;
        transition: all 0.3s ease;
    }

    .btn-primary:hover {
        transform: translateY(-2px);
        box-shadow: 0 5px 15px rgba(102, 126, 234, 0.4);
    }
</style>

@code {
    private UserSettingsDto? settings;
    private string apiKey = string.Empty;
    private string selectedModel = "gpt-4o-mini";
    private bool playwrightHeadless = true;
    private string errorMessage = string.Empty;
    private string successMessage = string.Empty;
    private bool isLoading = true;
    private bool isSaving = false;
    private bool showApiKey = false;

    protected override async Task OnInitializedAsync()
    {
        await LoadSettings();
    }

    private async Task LoadSettings()
    {
        isLoading = true;
        errorMessage = string.Empty;

        try
        {
            settings = await SettingsService.GetSettingsAsync();
            if (settings != null)
            {
                apiKey = settings.OpenAIApiKey;
                selectedModel = settings.SelectedModel;
                playwrightHeadless = settings.PlaywrightHeadless;
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Failed to load settings: {ex.Message}";
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task SaveSettings()
    {
        errorMessage = string.Empty;
        successMessage = string.Empty;
        isSaving = true;

        try
        {
            var request = new SaveUserSettingsRequest
            {
                OpenAIApiKey = apiKey,
                SelectedModel = selectedModel,
                PlaywrightHeadless = playwrightHeadless
            };

            var result = await SettingsService.SaveSettingsAsync(request);
            if (result != null)
            {
                settings = result;
                successMessage = "Settings saved successfully!";
            }
            else
            {
                errorMessage = "Failed to save settings. Please try again.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error saving settings: {ex.Message}";
        }
        finally
        {
            isSaving = false;
        }
    }
}
